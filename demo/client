#!/usr/bin/env node

const program = require('commander');
const fs = require('fs');
const path = require('path');
const low = require('lowdb');
const FileSync = require('lowdb/adapters/FileSync');
const CLIENT_DB_PATH = path.join(__dirname, 'client-db');
const {
  getTransactions,
  getTxInfo,
  getSwapRates,
  addressGenerator,
} = require('../dist/src');

const { TerraThreshSigClient } = require('../dist/src');
const client = new TerraThreshSigClient();

const terra = require('@terra-money/terra.js');

function ensureDirSync(dirpath) {
  try {
    fs.mkdirSync(dirpath, { recursive: true });
  } catch (err) {
    if (err.code !== 'EEXIST') throw err;
  }
}

program
  .command('address')
  .option('-i, --index <index>', 'Address index')
  .action(async (options) => {
    await client.init();
    const address = client.getAddress(options.index);
    console.log(address);
  });

program
  .command('balance <address>')
  .option(
    '-n, --network [name]',
    'Name of network ("soju", "vodka" or "columbus_3")',
  )
  .action(async (address, options) => {
    await client.init(address);
    console.log(await client.getBalance(address, options.network || 'soju'));
  });

program
  .command('rates')
  .option(
    '-d, --denom [symbol]',
    'denomination of the transfer ("uluna" default, "uusd", ...)',
  )
  .option('-n, --network [name]', 'Name of network ("soju" or "columbus_3")')
  .action(async (options) => {
    console.log(
      await getSwapRates(options.denom || 'uluna', options.network || 'soju'),
    );
  });

program.command('generate').action(() => {
  addressGenerator();
});

program
  .command('tx_info <txhash>')
  .option('-n, --network [name]', 'Name of network ("soju" or "columbus_3")')
  .action(async (txhash, options) => {
    console.log(await getTxInfo(txhash, options.network || 'soju'));
  });

program
  .command('transactions')
  .option('-a --account <account>', 'Account address')
  .option('-p --page <page>', 'Page number')
  .option('-l --limit <limit>', 'Page limit')
  .option('-n, --network [name]', 'Name of network ("soju" or "columbus-3')
  .action(async (options) => {
    const txs = await getTransactions(options);
    console.log(JSON.stringify(txs, null, 2));
  });

program
  .command('transfer <from> <to> <amount>')
  .option(
    '-d, --denom [symbol]',
    'denomination of the transfer ("luna" default, "usd", ...)',
  )
  .option(
    '-fd, --feedenom [symbol]',
    'denomination of the fee ("luna" default, "usd", ...)',
  )
  .option('-n, --network [name]', 'Name of network ("soju" or "columbus_3")')
  .option('-dr, --dry_run', 'Print the tx without posting it')
  .option('-all, --all', 'Transfer all the coins of the specified currency')
  .action(async (from, to, amount, options) => {
    await client.init(from);
    let sendOptions = {
      memo: options.memo,
      chainName: options.network,
      feeDenom: options.feedenom,
    };
    let res = await client.transfer(
      to,
      amount,
      options.denom || 'uluna',
      sendOptions,
      options.all,
      options.dry_run,
    );
    console.log('Result', res);
  });

program.parse(process.argv);
